{"version":3,"sources":["components/SideDrawer/DrawerToggleButton.js","components/Toolbar/Toolbar.js","new/recoveredcases.js","components/Common/Loading.jsx","components/Data/Facts.jsx","new/confirmed.js","new/newcase.js","new/deaths.js","homepage.js","world/globe.js","world/worldDateTime.js","world/worldAllStats.js","world/WorldStats.js","world/cases/ActiveCases.js","world/cases/ClosedCases.js","world/cases/Cases.js","world/worldwide.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","App.js","serviceWorker.js","index.js"],"names":["drawerToggleButton","props","className","onClick","click","toolbar","DrawerToggleButton","drawerClickHandler","to","RecoveredCases","recoveredProps","newcases","oldRecover","todayRecover","difference","parseFloat","replace","latest_stat_by_country","map","e","key","id","style","background","display","tR","oR","recoverDifferenceFunction","total_recovered","Loading","React","Component","Facts","state","loading","rank","emergency","dangerous","mild","threat","fetch","responses","json","dataFacts","j","countries_stat","length","country_name","this","setState","spanclasses","Fragment","Confirmed","confirmedProps","heading","date","items","time","query","i","total_cases","paddingBottom","NewCase","newcaseProps","oldcases","totalCases","nc","new_cases","Deaths","deathProps","prevDaysDeath","d","newD","new_deaths","total_deaths","color","Homepage","loadDivs","drawerToggleClickHandler","prevState","sideDrawerOpen","backdropToggleClickHandler","splitTime","timeSample","dot","split","today","Date","toISOString","slice","now","url","response","data","newArr","record_date","olddate","timeFuncConst","myDate","getDate","getMonth","getFullYear","urlSecond","responseSec","dataSec","console","log","indexFirst","stat_by_country","document","title","height","marginTop","Globe","WorldDateTime","dateTimeProps","worldDate","worldTime","WorldAllStats","world","worldStatsProps","numenator","dnumenator","denominator","recoveryPercentage","deathPercentage","activeCases","toFixed","toLocaleString","WorldStats","worldProps","ActiveCases","activeCasesProps","criticalCases","w","results","country","cases","critical","CalCases","rec","dea","total","mildCases","mildPercentage","criticalPercentage","padding","ClosedCases","closedCasesProps","recovered","deaths","totalClosed","Cases","casesProps","WorldWide","tStr","tSep","newArray","statistic_taken_at","timeString","textAlign","sideDrawer","classes","show","backdrop","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df28ed55.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SideDrawer.css';\r\n\r\n\r\nconst drawerToggleButton  = props => (\r\n    <button className=\"hamburger\" onClick={props.click} >\r\n        <div className=\"hamburger-piece\"></div>\r\n        <div className=\"hamburger-piece\"></div>\r\n        <div className=\"hamburger-piece\"></div>\r\n    </button>\r\n)\r\n\r\n\r\nexport default drawerToggleButton;","import React from 'react';\r\nimport './Toolbar.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nimport DrawerToggleButton from '../SideDrawer/DrawerToggleButton';\r\n\r\nconst toolbar = props => (\r\n    <header className=\"toolbar\">\r\n        <nav className=\"toolbar_navigation\">\r\n            <div>\r\n                <DrawerToggleButton  click={props.drawerClickHandler} />\r\n            </div>\r\n            <div className=\"toolbar_logo\">\r\n                <Link to=\"/\">\r\n                    Aurang!\r\n                </Link>\r\n            </div>\r\n            <div className=\"spacer\" />\r\n            <div className=\"toolbar_navigation_items\">\r\n                <ul>\r\n                    <Link to=\"/\">\r\n                        <li>\r\n                            Pakistan\r\n                        </li>\r\n                    </Link>\r\n                    <Link to=\"/worldwide\">\r\n                        <li>\r\n                            World Cases\r\n                        </li>\r\n                    </Link>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    </header>\r\n)\r\n\r\n\r\nexport default toolbar;","import React from 'react';\r\n\r\nconst RecoveredCases = (props) => {\r\n    const {newcases, oldRecover, todayRecover} = props.recoveredProps\r\n    let todayR = parseFloat(todayRecover.replace(/,/g, ''))\r\n    let oldR = parseFloat(oldRecover.replace(/,/g, ''))\r\n    let difference = todayR - oldR;\r\n    //console.log(difference, todayR, oldR)\r\n    //console.log(typeof oldR)\r\n    function recoverDifferenceFunction(difference, tR, oR)\r\n    {\r\n        if(tR > oR){\r\n            return(\r\n                <h4 id=\"figures\" className=\"green\">\r\n                    +{difference}\r\n                </h4>\r\n            )\r\n        }\r\n        else{\r\n           return(\r\n            <h4 id=\"figures\">\r\n            0\r\n        </h4>\r\n           )\r\n        }\r\n    }\r\n    return(\r\n        <div className=\"new_cases\">\r\n            {newcases.latest_stat_by_country.map((e) => (\r\n                <div key={e.id}>\r\n                    <div className=\"new_cases_title\" style={{\r\n                            background:'#07b673'\r\n                            \r\n                    }}>\r\n                        <h1>\r\n                            Newly Recovered\r\n                        </h1>\r\n                    </div>\r\n                    <div className=\"spacing\">\r\n                    <div className=\"row row_class\">\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"days\">\r\n                                Today:\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"col-6\" style={{display:'flex'}}>\r\n                            {recoverDifferenceFunction(difference, e.total_recovered, oldRecover)}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row row_class\">\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"days\">\r\n                                Yesterday:\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"figures\">\r\n                                {oldRecover}\r\n                            </h4>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row row_class\">\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"days\">\r\n                                Total:\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"figures\">\r\n                                {e.total_recovered}\r\n                            </h4>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecoveredCases;","import React from  'react';\r\nimport './Loading.css';\r\n\r\nclass Loading extends React.Component{\r\n    render(){\r\n        return(\r\n            <div id=\"loader\"></div>\r\n        )\r\n    }\r\n}\r\nexport default Loading;","import React from 'react';\r\nimport './Facts.css'\r\n\r\nclass Facts extends React.Component{\r\n    state = {\r\n        loading: true,\r\n        rank: null,\r\n        emergency:10,\r\n        dangerous: 20,\r\n        mild:30,\r\n        threat:31,\r\n}\r\n\r\n    async componentDidMount(){\r\n        const urlLink = \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php\";\r\n        const responses = await fetch(urlLink, {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n            \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n            \"x-rapidapi-key\": \"7232dd1eaamshbe4d4b7f0daf8dfp1e2bc6jsnee3f849aead5\"\r\n         }\r\n        })\r\n\r\n        const dataFacts = await responses.json();\r\n        \r\n        let j;\r\n        let rank = 0;\r\n        for(j = 0; j < dataFacts.countries_stat.length ; j++)\r\n        {\r\n            if(dataFacts.countries_stat[j].country_name === \"Pakistan\")\r\n            {\r\n                rank = j;\r\n                break;\r\n            }\r\n        }\r\n        this.setState({\r\n            loading:false,\r\n            rank: rank,\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let {rank, emergency, dangerous, mild, threat} = this.state;\r\n        let spanclasses = \"text\";\r\n        if(rank <= emergency) {\r\n            spanclasses = \"text e\"\r\n        }\r\n        if((rank > emergency) && (rank <=dangerous)){\r\n            spanclasses = \"text d\"\r\n        }\r\n        if((rank > dangerous) && (rank <= mild)){\r\n            spanclasses=\"text m\"\r\n        }\r\n        if(rank >= threat){\r\n            spanclasses=\"text t\"\r\n        }\r\n        return(\r\n            <React.Fragment>\r\n                Pakistan's rank in the world for most cases: <span className={spanclasses}>\r\n                    <strong>\r\n                        {this.state.rank}\r\n                    </strong>\r\n                </span>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Facts;","import React from 'react';\r\nimport Facts from '../components/Data/Facts'\r\nconst Confirmed = (props) => {\r\n    const {heading, date, items, time, query} = props.confirmedProps\r\n    return(\r\n        <div>\r\n            {items.latest_stat_by_country.map((i) => (\r\n                        <div key={i.id}>\r\n                            <div className=\"cards\">\r\n                                <div className=\"start\">\r\n                                    <h4>\r\n                                        {heading}{query}\r\n                                    </h4>\r\n                                    <h1>\r\n                                        Confirmed Cases: {i.total_cases}\r\n                                    </h1>\r\n                                </div>\r\n                                <h5>\r\n                                    <Facts />\r\n                                </h5>\r\n                                <p>\r\n                                   Date: {date}\r\n                                </p>\r\n                                <p style={{paddingBottom:'5px'}}>\r\n                                    Time: {time} (GMT + 5)\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Confirmed;","import React from 'react';\r\nimport '../components/Data/NewCases.css';\r\n\r\nconst NewCase = (props) => {\r\n    const {newcases, oldcases, totalCases} = props.newcaseProps;\r\n   \r\n   function newCasesFunction(nc, oc){\r\n        if(nc < oc){\r\n           return(\r\n            <h4 id=\"figures\" className=\"green\">\r\n            +{nc}\r\n        </h4>\r\n           )\r\n        }\r\n        else{\r\n           return(\r\n            <h4 id=\"figures\">\r\n            0\r\n        </h4>\r\n           )\r\n        }\r\n    }\r\n    return(\r\n        <div className=\"new_cases\">\r\n            {newcases.latest_stat_by_country.map((e) => (\r\n                <div key={e.id}>\r\n                    <div className=\"new_cases_title\" style={{\r\n                            background: '#e5a929'\r\n                    }}>\r\n                        <h1>\r\n                            New Cases\r\n                        </h1>\r\n                    </div>\r\n                    <div className=\"spacing\">\r\n                    <div className=\"row row_class\">\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"days\">\r\n                                Today:\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            {newCasesFunction(e.new_cases, oldcases)}\r\n                            \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row row_class\">\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"days\">\r\n                                Yesterday:\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"figures\">\r\n                                {oldcases}\r\n                            </h4>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row row_class\">\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"days\">\r\n                                Total:\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h4 id=\"figures\">\r\n                                {totalCases}\r\n                            </h4>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewCase;","import React from 'react';\r\n\r\nconst Deaths = (props) => {\r\n    const {newcases, prevDaysDeath} = props.deathProps;\r\n    let spanClass2 ={\r\n        fontSize:'12px', fontStyle:'italic', paddingLeft:'10px', color:'red', fontWeight:'bold'\r\n    }\r\n    function calcaulateDeathFunction(newD, totalD, prevD){\r\n        if(0 < prevD)\r\n        {\r\n            return(\r\n                <h4 id=\"figures\" className=\"red\">\r\n                    +{newD}\r\n                </h4>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <h4 id=\"figures\">\r\n                    0\r\n                </h4>\r\n            )\r\n        }\r\n    }\r\n    return(\r\n        <div className=\"new_cases\">\r\n            {newcases.latest_stat_by_country.map((d) => (\r\n                <div key={d.id}>\r\n                <div className=\"new_cases_title\" style={{\r\n                        background: 'rgb(213,21,38)'\r\n                }}>\r\n                    <h1>\r\n                        Total Deaths\r\n                    </h1>\r\n                </div>\r\n                <div className=\"spacing\">\r\n                <div className=\"row row_class\">\r\n                    <div className=\"col-6\">\r\n                        <h4 id=\"days\">\r\n                            Today:\r\n                        </h4>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        {calcaulateDeathFunction(d.new_deaths,d.total_deaths, prevDaysDeath)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row_class\">\r\n                    <div className=\"col-6\">\r\n                        <h4 id=\"days\">\r\n                            Yesterday:\r\n                        </h4>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <h4 id=\"figures\" style={{color:'red'}}>\r\n                            {prevDaysDeath}\r\n                        </h4>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row_class\">\r\n                    <div className=\"col-6\">\r\n                        <h4 id=\"days\">\r\n                            Total:\r\n                        </h4>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <h4 id=\"figures\">\r\n                            {d.total_deaths}\r\n                        </h4>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Deaths;","import React from 'react';\r\n//import DataFile from './DataFile';\r\n// import CasesByCountry from './CasesByCountry'\r\n//import SideDrawer from './components/SideDrawer/SideDrawer';\r\n//import Backdrop from './components/Backdrop/Backdrop';\r\n//import NewCases from './components/Data/NewCases';\r\nimport RecoveredCases from './new/recoveredcases';\r\nimport Loader from './components/Common/Loading';\r\nimport Confirmed from './new/confirmed';\r\nimport NewCase from './new/newcase';\r\nimport Deaths from './new/deaths';\r\n\r\n\r\nclass Homepage extends React.Component{\r\n    state={\r\n      loading: true,\r\n      items: [],\r\n      heading: \"Covid-19 Cases in \",\r\n      query: \"Pakistan\",\r\n      date:null,\r\n      time:null,\r\n      newcases:null,\r\n      oldcases:null,\r\n      oldRecover:null,\r\n      todayRecover:null,\r\n      prevDaysDeath:null,\r\n      totalCases: null,\r\n      loadDivs:null,\r\n    }\r\n\r\n    async componentDidMount() {\r\n      let today = new Date().toISOString().slice(0, 10)\r\n      let prevDate = new Date(Date.now() - 864e5).toISOString().slice(0, 10)\r\n      //console.log(prevDate, today)\r\n      const url = `https://coronavirus-monitor.p.rapidapi.com/coronavirus/latest_stat_by_country.php?country=${this.state.query}`\r\n      const response = await fetch(url, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n            \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n            \"x-rapidapi-key\": \"7232dd1eaamshbe4d4b7f0daf8dfp1e2bc6jsnee3f849aead5\"\r\n                }})\r\n  \r\n          const data = await response.json()\r\n          const items = data\r\n          \r\n          //this.setState({items: items, loading: false})\r\n          //console.log(data)\r\n  \r\n          let newArr = []\r\n          newArr = items.latest_stat_by_country[0].record_date\r\n          let olddate = newArr.split(' ')\r\n          let timeFuncConst = olddate[1]\r\n          \r\n          let myDate = new Date(olddate[0]) \r\n          \r\n          let date = myDate.getDate() + \"/\" + (myDate.getMonth() + 1) + \"/\" + myDate.getFullYear()\r\n          //console.log(date)\r\n  \r\n          const separtor = '.'\r\n          \r\n\r\n          function splitTime(timeSample, dot){\r\n            const timeArray = timeSample.split(dot)\r\n            return timeArray\r\n          }\r\n          let time  = splitTime(timeFuncConst, separtor)\r\n          \r\n          let totalCases = data.latest_stat_by_country[0].total_cases;\r\n  \r\n        //Second Query\r\n  \r\n        const urlSecond = `https://coronavirus-monitor.p.rapidapi.com/coronavirus/history_by_particular_country_by_date.php?country=${this.state.query}&date=${today}`\r\n        const responseSec = await fetch(urlSecond, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n              \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n              \"x-rapidapi-key\": \"7232dd1eaamshbe4d4b7f0daf8dfp1e2bc6jsnee3f849aead5\"\r\n          }\r\n        })\r\n        const dataSec = await responseSec.json()\r\n        console.log(dataSec)\r\n        let indexFirst = data.latest_stat_by_country.length -1 \r\n        const oldcases = dataSec.stat_by_country[indexFirst].new_cases\r\n        //const todayCases = data.latest_stat_by_country[0].new_cases\r\n        \r\n  \r\n  \r\n        //Third Query\r\n  \r\n        const todayRecover = data.latest_stat_by_country[0].total_recovered\r\n        const oldRecover = dataSec.stat_by_country[indexFirst].total_recovered\r\n  \r\n  \r\n        //Fourth Query\r\n  \r\n        const prevDaysDeath = dataSec.stat_by_country[indexFirst].new_deaths\r\n        //const deathPrev = dataSec.stat_by_country[0].total_deaths\r\n  \r\n\r\n        //Fifth Query\r\n        \r\n        //let index = dataSec.stat_by_country.length - 1\r\n        \r\n        //console.log(prevDaysDeath)\r\n        //const oldcases = dataSec.stat_by_country[0].new_cases\r\n        \r\n        //All SetState Statements\r\n        \r\n        this.setState({\r\n            items:items,\r\n            newcases:data,\r\n            oldcases:oldcases,\r\n            date:date,\r\n            time:time[0],\r\n            oldRecover:oldRecover,\r\n            todayRecover:todayRecover,\r\n            prevDaysDeath:prevDaysDeath,\r\n            totalCases:totalCases,\r\n            loading: false,\r\n        })\r\n        document.title = `Pakistan - ${totalCases}`\r\n        \r\n     }\r\n    \r\n  \r\n    drawerToggleClickHandler = () =>{\r\n      this.setState((prevState) => {\r\n        return {sideDrawerOpen: !prevState.sideDrawerOpen}\r\n      })\r\n    }\r\n  \r\n    backdropToggleClickHandler = () => {\r\n      this.setState({\r\n        sideDrawerOpen:false\r\n      })\r\n    }\r\n    render(){\r\n     \r\n      let {loading, items,query, heading, date, time, newcases, oldcases, oldRecover, todayRecover, prevDaysDeath, totalCases} = this.state;\r\n      let confirmedProps = {heading, date, time, items, query}\r\n      let newcaseProps = {newcases, oldcases, totalCases};\r\n      let recoveredProps = {newcases, oldRecover, todayRecover}\r\n      let deathProps = {newcases, prevDaysDeath}\r\n      if(loading)\r\n      {\r\n        return <Loader />\r\n      }\r\n      if(!items)\r\n      {\r\n        return(\r\n          <div>Hello, sorry</div>\r\n        )\r\n      }\r\n      return (\r\n        <div style={{height:'100%'}}>\r\n          \r\n          <div style={{marginTop:'70px'}}>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-8 offset-lg-2\">\r\n                  <Confirmed confirmedProps={confirmedProps} />\r\n                  <div className=\"row\">\r\n                    <div className=\"col-lg-4\">\r\n                      <NewCase newcaseProps={newcaseProps} />\r\n                    </div>\r\n                    <div className=\"col-lg-4\">\r\n                      <RecoveredCases recoveredProps={recoveredProps} />\r\n                    </div>\r\n                    <div className=\"col-lg-4\">\r\n                      <Deaths deathProps={deathProps} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Homepage;\r\n  ","import React from 'react';\r\nimport './worldwide.css';\r\n\r\nconst Globe = () => {\r\n    return(\r\n        <div className=\"containerSpecial\">\r\n            <div className=\"planet-image\">\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Globe;","import React from 'react';\r\n\r\nconst WorldDateTime = (props) => {\r\n    const {worldDate, worldTime} = props.dateTimeProps\r\n    return(\r\n        <div className=\"date_time\">\r\n            <div className=\"date\">\r\n                {worldDate}\r\n            </div>\r\n            <div className=\"spacers\"></div>\r\n            <div className=\"time\">\r\n                {worldTime}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorldDateTime;","import React from 'react';\r\n\r\nconst WorldAllStats = (props) => {\r\n    const {world} = props.worldStatsProps;\r\n    let numenator = parseFloat(world.total_recovered.replace(/,/g, ''))\r\n    let dnumenator = parseFloat(world.total_deaths.replace(/,/g, ''))\r\n    let denominator = parseFloat(world.total_cases.replace(/,/g, ''))\r\n    let recoveryPercentage = numenator/denominator * 100;\r\n    let deathPercentage = dnumenator/denominator * 100;\r\n    let activeCases = denominator - dnumenator - numenator\r\n     return(\r\n        <div className=\"allstats\">\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"right\">\r\n                        Total Cases:\r\n                    </h2>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"left\">\r\n                        <b>{world.total_cases}</b>\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"right\">\r\n                        Total Recovered:\r\n                    </h2>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"left\" style={{color:'#1db87d'}}>\r\n                        <b>{world.total_recovered}</b>\r\n                        <span>\r\n                            {recoveryPercentage.toFixed(2)}%\r\n                        </span>\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"right\">\r\n                        Total Deaths:\r\n                    </h2>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"left\" style={{color:'#c02f24'}}>\r\n                        <b>{world.total_deaths}</b>\r\n                        <span>\r\n                            {deathPercentage.toFixed(2)}%\r\n                        </span>\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"right\">\r\n                        Active Cases:\r\n                    </h2>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"left\">\r\n                        <b>\r\n                            {activeCases.toLocaleString()}\r\n                        </b>\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"right\">\r\n                    New Cases:\r\n                    </h2>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"left\">\r\n                        <b>{world.new_cases}</b>\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"right\">\r\n                    New Deaths:\r\n                    </h2>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h2 className=\"left\">\r\n                        <b>{world.new_deaths}</b>\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     )\r\n}\r\n\r\nexport default WorldAllStats;","import React from 'react';\r\nimport WorldDateTime from './worldDateTime';\r\nimport WorldAllStats from './worldAllStats';\r\nimport './worldstats.css';\r\n\r\n\r\nconst WorldStats = (props) => {\r\n    const {world, worldDate, worldTime} = props.worldProps;\r\n    let worldStatsProps = {world}\r\n    let dateTimeProps = {worldDate, worldTime};\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"world_stats\">\r\n                <WorldDateTime dateTimeProps={dateTimeProps} />\r\n                <WorldAllStats worldStatsProps = {worldStatsProps} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorldStats;\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst ActiveCases = (props) => {\r\n    const {world, critical} = props.activeCasesProps;\r\n    //console.log(critical)\r\n    //console.log(world.world.total_recovered)\r\n    //console.log(critical.response[28].cases.critical)\r\n    function CalCases(w){\r\n        for(let i=0; i< w.results; i++){\r\n            if(w.response[i].country === \"All\"){\r\n                return w.response[i].cases.critical;\r\n            }\r\n            //sum = sum + w.response[i].cases.critical\r\n        }\r\n    }\r\n    let criticalCases = CalCases(critical)\r\n    //console.log(typeof world.total_recovered)\r\n    let rec = parseFloat(world.world.total_recovered.replace(/,/g, ''))\r\n    let dea = parseFloat(world.world.total_deaths.replace(/,/g, ''))\r\n    let total = parseFloat(world.world.total_cases.replace(/,/g, ''))\r\n    let activeCases = total - rec - dea\r\n    let mildCases = activeCases - criticalCases\r\n    \r\n    let mildPercentage = mildCases/total*100;\r\n    let criticalPercentage = criticalCases/total*100;\r\n\r\n    return(\r\n        <div className=\"middle_cases\">\r\n            <div className=\"bg_headings\">\r\n                <h2>\r\n                    Active Cases\r\n                </h2>\r\n            </div>\r\n            <div className=\"cases_data\">\r\n                <h3>\r\n                    {activeCases.toLocaleString()}\r\n                </h3>\r\n                <h6>\r\n                    Currently Infected:\r\n                </h6>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <div className=\"headings\">\r\n                        <h2>\r\n                            Mild Condition:\r\n                        </h2>\r\n                    </div>\r\n                    \r\n                    <div className=\"cases_data\" style={{padding:'5px 0px'}}>\r\n                        <h3 style={{color:'#0371EA'}}>\r\n                            {mildCases.toLocaleString()}\r\n                            <span id=\"spanID\">\r\n                                <h6 style={{color:'#0371EA'}}>\r\n                                    ({mildPercentage.toFixed(2)}%)\r\n                                </h6>\r\n                            </span>\r\n                        </h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <div className=\"headings\">\r\n                        <h2>\r\n                            Critical Condition:\r\n                        </h2>\r\n                    </div>\r\n                    \r\n                    <div className=\"cases_data\" style={{padding:'5px 0px'}}>\r\n                        <h3  style={{color:'#c02f24'}}>\r\n                            {criticalCases.toLocaleString()}\r\n                            <span id=\"spanID\">\r\n                                <h6 style={{color:'#c02f24'}}>\r\n                                    ({criticalPercentage.toFixed(2)}%)\r\n                                </h6>\r\n                            </span>\r\n                        </h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActiveCases;","import React from 'react';\r\nimport './middlecases.css';\r\n\r\nconst ClosedCases = (props) => {\r\n    const {world} = props.closedCasesProps\r\n    let recovered = parseFloat(world.total_recovered.replace(/,/g, ''))\r\n    let deaths = parseFloat(world.total_deaths.replace(/,/g, ''))\r\n    //let closed = parseFloat(world.total_cases.replace(/,/g, ''))\r\n    let totalClosed = recovered + deaths\r\n    let recoveryPercentage = recovered/totalClosed * 100;\r\n    let deathPercentage = deaths/totalClosed * 100;\r\n    return(\r\n        <div className=\"middle_cases\">\r\n            <div className=\"bg_headings\">\r\n                <h2>\r\n                    Closed Cases\r\n                </h2>\r\n            </div>\r\n            <div className=\"cases_data\">\r\n                <h3>\r\n                    {totalClosed.toLocaleString()}\r\n                </h3>\r\n                <h6>\r\n                    Closed cases that have:\r\n                </h6>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <div className=\"headings\">\r\n                        <h2>\r\n                            Recovered:\r\n                        </h2>\r\n                    </div>\r\n                    \r\n                    <div className=\"cases_data\" style={{padding:'5px 0px'}}>\r\n                        <h3 style={{color:'#1db87d'}}>\r\n                            {world.total_recovered}\r\n                            <span id=\"spanID\">\r\n                                <h6 style={{color:'#1db87d'}}>\r\n                                    ({recoveryPercentage.toFixed(2)}%)\r\n                                </h6>\r\n                            </span>\r\n                        </h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <div className=\"headings\">\r\n                        <h2>\r\n                            Deaths:\r\n                        </h2>\r\n                    </div>\r\n                    \r\n                    <div className=\"cases_data\" style={{padding:'5px 0px'}}>\r\n                        <h3  style={{color:'#c02f24'}}>\r\n                            {world.total_deaths}\r\n                            <span id=\"spanID\">\r\n                                <h6 style={{color:'#c02f24'}}>\r\n                                    ({deathPercentage.toFixed(2)}%)\r\n                                </h6>\r\n                            </span>\r\n                        </h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClosedCases;","import React from 'react';\r\nimport ActiveCases from './ActiveCases';\r\nimport ClosedCases from './ClosedCases';\r\nimport Loader from '../../components/Common/Loading';\r\nclass Cases extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            world:props.casesProps,\r\n            critical:null,\r\n            loading:true,\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount(){\r\n        const url = 'https://covid-193.p.rapidapi.com/statistics';\r\n        const response = await fetch(url, {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"7232dd1eaamshbe4d4b7f0daf8dfp1e2bc6jsnee3f849aead5\"\r\n            }\r\n        })\r\n        \r\n        const data = await response.json()\r\n        this.setState({\r\n            critical:data,\r\n            loading:false,\r\n        })\r\n        \r\n    }\r\n    \r\n    render(){\r\n        let {world, critical, loading} = this.state;\r\n        //let closedCasesProps = this.state.world\r\n        let closedCasesProps = world\r\n        //let activeWorldProps =  this.state.world\r\n        //let activeCriticalProps = this.state.critical\r\n        let activeCasesProps = {world,critical}\r\n        //console.log(activeCasesProps)\r\n\r\n        if(loading){\r\n            return <Loader />\r\n        }\r\n        if(!critical){\r\n            return <p>Hello error</p>\r\n        }\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"col-lg-6\">\r\n                    <ActiveCases activeCasesProps={activeCasesProps} />\r\n                </div>\r\n                <div className=\"col-lg-6\">\r\n                    <ClosedCases closedCasesProps={closedCasesProps} />\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cases;","import React from 'react';\r\nimport Globe from './globe';\r\nimport Loader from '../components/Common/Loading';\r\nimport WorldStats from './WorldStats';\r\nimport Cases from './cases/Cases'\r\n\r\nclass WorldWide extends React.Component{\r\n    state={\r\n        world:[],\r\n        loading:true,\r\n        worldDate:null,\r\n        worldTime:null,\r\n    }\r\n    async componentDidMount(){\r\n        const url = 'https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php';\r\n        const response =  await fetch(url, {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"7232dd1eaamshbe4d4b7f0daf8dfp1e2bc6jsnee3f849aead5\"\r\n            }\r\n        })\r\n\r\n        \r\n        const data = await response.json()\r\n\r\n        let newArray = []\r\n        newArray = data.statistic_taken_at\r\n        let olddate = newArray.split(' ')\r\n        let myDate = new Date(olddate[0]) \r\n        let worldDate = myDate.getDate() + \"/\" + (myDate.getMonth() + 1) + \"/\" + myDate.getFullYear()\r\n        //console.log(formatted)\r\n        //console.log(olddate[1])\r\n\r\n        const timeString = olddate[1]\r\n        const timeSep = \".\"\r\n\r\n        function splitTime(tStr, tSep){\r\n            const timeArray = tStr.split(tSep)\r\n            return timeArray\r\n        }\r\n\r\n        let worldTime = splitTime(timeString, timeSep)\r\n        //console.log(worldTime[0])\r\n        this.setState({\r\n            world:data,\r\n            worldDate:worldDate,\r\n            worldTime: worldTime[0],\r\n            loading:false\r\n        })\r\n        document.title = `World Report`\r\n        //console.log(data)\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        let {world, loading, worldDate, worldTime} = this.state;\r\n        let worldProps = {world, worldDate, worldTime};\r\n        let casesProps = {world};\r\n        if(loading){\r\n            return <Loader />\r\n        }\r\n        if(!world){\r\n            return <h2 style={{textAlign:'center', padding:'30px'}}>Error</h2>\r\n        }\r\n\r\n        return(\r\n            <div style={{marginTop:'70px'}}>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <Globe />\r\n                        </div>\r\n                        <div className=\"col-lg-6\">\r\n                            <div className=\"world_report_heading\">\r\n                                <h2>World Report</h2>\r\n                            </div>\r\n                            <WorldStats worldProps={worldProps} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Cases casesProps={casesProps} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WorldWide;","import React from 'react';\r\nimport './SideDrawer.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst sideDrawer = props => {\r\n    \r\n    let classes = 'side_drawer'\r\n    if(props.show){\r\n        classes = 'side_drawer open'\r\n    }\r\n    return(\r\n        <nav className={classes} onClick={props.click}>\r\n            <ul>\r\n            <Link to=\"/\">\r\n                <li>\r\n                    Pakistan\r\n                </li>\r\n            </Link>\r\n            <Link to=\"/worldwide\">\r\n                <li>\r\n                    World Cases\r\n                </li>\r\n            </Link>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default sideDrawer;","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = props => (\r\n    <div className=\"backdrop\" onClick={props.click} />\r\n)\r\n\r\nexport default backdrop;","import React from 'react';\nimport './App.css';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport Homepage from './homepage';\nimport WorldWide from './world/worldwide';\nimport SideDrawer from './components/SideDrawer/SideDrawer';\nimport Backdrop from './components/Backdrop/Backdrop';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      sideDrawerOpen: false,\n      loading:true\n    }\n  }\n  drawerToggleClickHandler = () =>{\n    this.setState((prevState) => {\n      return {sideDrawerOpen: !prevState.sideDrawerOpen}\n    })\n  }\n\n  backdropToggleClickHandler = () => {\n    this.setState({\n      sideDrawerOpen:false\n    })\n  }\n  render(){\n    let backdrop;\n\n    if(this.state.sideDrawerOpen) {\n      backdrop = <Backdrop click={this.backdropToggleClickHandler} />\n    }\n    return (\n      <div style={{height:'100%'}}>\n        <Router>\n          <Toolbar />\n            <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n            <SideDrawer show={this.state.sideDrawerOpen} click={this.drawerToggleClickHandler} />\n            {backdrop}\n          <Switch>\n            <Route  exact path=\"/\" component={Homepage} />\n            <Route path=\"/worldwide\" component={WorldWide} />\n            <Route path=\"/covid19\" component={Homepage} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}